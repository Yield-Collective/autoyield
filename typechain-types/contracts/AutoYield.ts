/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IAutoYield {
  export type AutoCompoundParamsStruct = {
    tokenId: BigNumberish;
    rewardConversion: BigNumberish;
    withdrawReward: boolean;
    doSwap: boolean;
  };

  export type AutoCompoundParamsStructOutput = [
    tokenId: bigint,
    rewardConversion: bigint,
    withdrawReward: boolean,
    doSwap: boolean
  ] & {
    tokenId: bigint;
    rewardConversion: bigint;
    withdrawReward: boolean;
    doSwap: boolean;
  };

  export type RangePositionConfigStruct = {
    lowerTickLimit: BigNumberish;
    upperTickLimit: BigNumberish;
    lowerTickDelta: BigNumberish;
    upperTickDelta: BigNumberish;
    token0SlippageX64: BigNumberish;
    token1SlippageX64: BigNumberish;
    onlyFees: boolean;
    maxRewardX64: BigNumberish;
  };

  export type RangePositionConfigStructOutput = [
    lowerTickLimit: bigint,
    upperTickLimit: bigint,
    lowerTickDelta: bigint,
    upperTickDelta: bigint,
    token0SlippageX64: bigint,
    token1SlippageX64: bigint,
    onlyFees: boolean,
    maxRewardX64: bigint
  ] & {
    lowerTickLimit: bigint;
    upperTickLimit: bigint;
    lowerTickDelta: bigint;
    upperTickDelta: bigint;
    token0SlippageX64: bigint;
    token1SlippageX64: bigint;
    onlyFees: boolean;
    maxRewardX64: bigint;
  };

  export type DecreaseLiquidityAndCollectParamsStruct = {
    tokenId: BigNumberish;
    liquidity: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
    recipient: AddressLike;
  };

  export type DecreaseLiquidityAndCollectParamsStructOutput = [
    tokenId: bigint,
    liquidity: bigint,
    amount0Min: bigint,
    amount1Min: bigint,
    deadline: bigint,
    recipient: string
  ] & {
    tokenId: bigint;
    liquidity: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
    deadline: bigint;
    recipient: string;
  };

  export type RangeExecuteParamsStruct = {
    tokenId: BigNumberish;
    swap0To1: boolean;
    amountIn: BigNumberish;
    swapData: BytesLike;
    liquidity: BigNumberish;
    amountRemoveMin0: BigNumberish;
    amountRemoveMin1: BigNumberish;
    deadline: BigNumberish;
    rewardX64: BigNumberish;
  };

  export type RangeExecuteParamsStructOutput = [
    tokenId: bigint,
    swap0To1: boolean,
    amountIn: bigint,
    swapData: string,
    liquidity: bigint,
    amountRemoveMin0: bigint,
    amountRemoveMin1: bigint,
    deadline: bigint,
    rewardX64: bigint
  ] & {
    tokenId: bigint;
    swap0To1: boolean;
    amountIn: bigint;
    swapData: string;
    liquidity: bigint;
    amountRemoveMin0: bigint;
    amountRemoveMin1: bigint;
    deadline: bigint;
    rewardX64: bigint;
  };
}

export declare namespace INonfungiblePositionManager {
  export type CollectParamsStruct = {
    tokenId: BigNumberish;
    recipient: AddressLike;
    amount0Max: BigNumberish;
    amount1Max: BigNumberish;
  };

  export type CollectParamsStructOutput = [
    tokenId: bigint,
    recipient: string,
    amount0Max: bigint,
    amount1Max: bigint
  ] & {
    tokenId: bigint;
    recipient: string;
    amount0Max: bigint;
    amount1Max: bigint;
  };
}

export interface AutoYieldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_POSITIONS_PER_ADDRESS"
      | "MAX_REWARD_X64"
      | "MAX_TWAP_TICK_DIFFERENCE"
      | "MIN_TWAP_SECONDS"
      | "TWAPSeconds"
      | "accountBalances"
      | "accountTokens"
      | "autoCompound"
      | "balanceOf"
      | "collect"
      | "compounderRewardX64"
      | "configToken"
      | "decreaseLiquidityAndCollect"
      | "factory"
      | "maxTWAPTickDifference"
      | "multicall"
      | "npm"
      | "onERC721Received"
      | "operators"
      | "owner"
      | "ownerOf"
      | "rangePositionConfigs"
      | "reBalance"
      | "renounceOwnership"
      | "setOperator"
      | "setReward"
      | "setSwapRouterReBalance"
      | "setTWAPConfig"
      | "setWithdrawer"
      | "swapRouter"
      | "swapRouterReBalance"
      | "totalRewardX64"
      | "transferOwnership"
      | "weth"
      | "withdrawBalance"
      | "withdrawBalances"
      | "withdrawETH"
      | "withdrawToken"
      | "withdrawer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoCompounded"
      | "BalanceAdded"
      | "BalanceRemoved"
      | "BalanceWithdrawn"
      | "OperatorChanged"
      | "OwnershipTransferred"
      | "RangeChanged"
      | "RangePositionConfigured"
      | "RewardUpdated"
      | "SwapRouterChanged"
      | "TWAPConfigChanged"
      | "TWAPConfigUpdated"
      | "TokenDeposited"
      | "TokenWithdrawn"
      | "WithdrawerChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_POSITIONS_PER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_X64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TWAP_TICK_DIFFERENCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TWAP_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TWAPSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoCompound",
    values: [IAutoYield.AutoCompoundParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [INonfungiblePositionManager.CollectParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "compounderRewardX64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configToken",
    values: [BigNumberish, IAutoYield.RangePositionConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityAndCollect",
    values: [IAutoYield.DecreaseLiquidityAndCollectParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTWAPTickDifference",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "npm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangePositionConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reBalance",
    values: [IAutoYield.RangeExecuteParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouterReBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTWAPConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterReBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardX64",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalances",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish, AddressLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_POSITIONS_PER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_X64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TWAP_TICK_DIFFERENCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TWAP_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TWAPSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compounderRewardX64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityAndCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTWAPTickDifference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "npm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangePositionConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouterReBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTWAPConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterReBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardX64",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawer", data: BytesLike): Result;
}

export namespace AutoCompoundedEvent {
  export type InputTuple = [
    account: AddressLike,
    tokenId: BigNumberish,
    amountAdded0: BigNumberish,
    amountAdded1: BigNumberish,
    reward0: BigNumberish,
    reward1: BigNumberish,
    token0: AddressLike,
    token1: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    tokenId: bigint,
    amountAdded0: bigint,
    amountAdded1: bigint,
    reward0: bigint,
    reward1: bigint,
    token0: string,
    token1: string
  ];
  export interface OutputObject {
    account: string;
    tokenId: bigint;
    amountAdded0: bigint;
    amountAdded1: bigint;
    reward0: bigint;
    reward1: bigint;
    token0: string;
    token1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceAddedEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceRemovedEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceWithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorChangedEvent {
  export type InputTuple = [newOperator: AddressLike, active: boolean];
  export type OutputTuple = [newOperator: string, active: boolean];
  export interface OutputObject {
    newOperator: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RangeChangedEvent {
  export type InputTuple = [oldTokenId: BigNumberish, newTokenId: BigNumberish];
  export type OutputTuple = [oldTokenId: bigint, newTokenId: bigint];
  export interface OutputObject {
    oldTokenId: bigint;
    newTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RangePositionConfiguredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    lowerTickLimit: BigNumberish,
    upperTickLimit: BigNumberish,
    lowerTickDelta: BigNumberish,
    upperTickDelta: BigNumberish,
    token0SlippageX64: BigNumberish,
    token1SlippageX64: BigNumberish,
    onlyFees: boolean,
    maxRewardX64: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    lowerTickLimit: bigint,
    upperTickLimit: bigint,
    lowerTickDelta: bigint,
    upperTickDelta: bigint,
    token0SlippageX64: bigint,
    token1SlippageX64: bigint,
    onlyFees: boolean,
    maxRewardX64: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    lowerTickLimit: bigint;
    upperTickLimit: bigint;
    lowerTickDelta: bigint;
    upperTickDelta: bigint;
    token0SlippageX64: bigint;
    token1SlippageX64: bigint;
    onlyFees: boolean;
    maxRewardX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    totalRewardX64: BigNumberish,
    compounderRewardX64: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    totalRewardX64: bigint,
    compounderRewardX64: bigint
  ];
  export interface OutputObject {
    account: string;
    totalRewardX64: bigint;
    compounderRewardX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRouterChangedEvent {
  export type InputTuple = [swapRouterReBalancer: AddressLike];
  export type OutputTuple = [swapRouterReBalancer: string];
  export interface OutputObject {
    swapRouterReBalancer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPConfigChangedEvent {
  export type InputTuple = [
    TWAPSeconds: BigNumberish,
    maxTWAPTickDifference: BigNumberish
  ];
  export type OutputTuple = [
    TWAPSeconds: bigint,
    maxTWAPTickDifference: bigint
  ];
  export interface OutputObject {
    TWAPSeconds: bigint;
    maxTWAPTickDifference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPConfigUpdatedEvent {
  export type InputTuple = [
    account: AddressLike,
    maxTWAPTickDifference: BigNumberish,
    TWAPSeconds: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    maxTWAPTickDifference: bigint,
    TWAPSeconds: bigint
  ];
  export interface OutputObject {
    account: string;
    maxTWAPTickDifference: bigint;
    TWAPSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [account: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [account: string, tokenId: bigint];
  export interface OutputObject {
    account: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [account: string, to: string, tokenId: bigint];
  export interface OutputObject {
    account: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawerChangedEvent {
  export type InputTuple = [newWithdrawer: AddressLike];
  export type OutputTuple = [newWithdrawer: string];
  export interface OutputObject {
    newWithdrawer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AutoYield extends BaseContract {
  connect(runner?: ContractRunner | null): AutoYield;
  waitForDeployment(): Promise<this>;

  interface: AutoYieldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_POSITIONS_PER_ADDRESS: TypedContractMethod<[], [bigint], "view">;

  MAX_REWARD_X64: TypedContractMethod<[], [bigint], "view">;

  MAX_TWAP_TICK_DIFFERENCE: TypedContractMethod<[], [bigint], "view">;

  MIN_TWAP_SECONDS: TypedContractMethod<[], [bigint], "view">;

  TWAPSeconds: TypedContractMethod<[], [bigint], "view">;

  accountBalances: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  accountTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  autoCompound: TypedContractMethod<
    [params: IAutoYield.AutoCompoundParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        reward0: bigint;
        reward1: bigint;
        compounded0: bigint;
        compounded1: bigint;
      }
    ],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  collect: TypedContractMethod<
    [params: INonfungiblePositionManager.CollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  compounderRewardX64: TypedContractMethod<[], [bigint], "view">;

  configToken: TypedContractMethod<
    [tokenId: BigNumberish, config: IAutoYield.RangePositionConfigStruct],
    [void],
    "nonpayable"
  >;

  decreaseLiquidityAndCollect: TypedContractMethod<
    [params: IAutoYield.DecreaseLiquidityAndCollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  maxTWAPTickDifference: TypedContractMethod<[], [bigint], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  npm: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rangePositionConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        lowerTickLimit: bigint;
        upperTickLimit: bigint;
        lowerTickDelta: bigint;
        upperTickDelta: bigint;
        token0SlippageX64: bigint;
        token1SlippageX64: bigint;
        onlyFees: boolean;
        maxRewardX64: bigint;
      }
    ],
    "view"
  >;

  reBalance: TypedContractMethod<
    [params: IAutoYield.RangeExecuteParamsStruct],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [_operator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  setReward: TypedContractMethod<
    [_totalRewardX64: BigNumberish, _compounderRewardX64: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapRouterReBalance: TypedContractMethod<
    [_swapRouterReBalance: AddressLike],
    [void],
    "nonpayable"
  >;

  setTWAPConfig: TypedContractMethod<
    [_maxTWAPTickDifference: BigNumberish, _TWAPSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawer: TypedContractMethod<
    [_withdrawer: AddressLike],
    [void],
    "nonpayable"
  >;

  swapRouter: TypedContractMethod<[], [string], "view">;

  swapRouterReBalance: TypedContractMethod<[], [string], "view">;

  totalRewardX64: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawBalance: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawBalances: TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [
      tokenId: BigNumberish,
      to: AddressLike,
      withdrawBalances_: boolean,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_POSITIONS_PER_ADDRESS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REWARD_X64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_TWAP_TICK_DIFFERENCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TWAP_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TWAPSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accountBalances"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountTokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "autoCompound"
  ): TypedContractMethod<
    [params: IAutoYield.AutoCompoundParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        reward0: bigint;
        reward1: bigint;
        compounded0: bigint;
        compounded1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collect"
  ): TypedContractMethod<
    [params: INonfungiblePositionManager.CollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "compounderRewardX64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configToken"
  ): TypedContractMethod<
    [tokenId: BigNumberish, config: IAutoYield.RangePositionConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidityAndCollect"
  ): TypedContractMethod<
    [params: IAutoYield.DecreaseLiquidityAndCollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxTWAPTickDifference"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "npm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      arg3: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rangePositionConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        lowerTickLimit: bigint;
        upperTickLimit: bigint;
        lowerTickDelta: bigint;
        upperTickDelta: bigint;
        token0SlippageX64: bigint;
        token1SlippageX64: bigint;
        onlyFees: boolean;
        maxRewardX64: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "reBalance"
  ): TypedContractMethod<
    [params: IAutoYield.RangeExecuteParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [_operator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReward"
  ): TypedContractMethod<
    [_totalRewardX64: BigNumberish, _compounderRewardX64: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapRouterReBalance"
  ): TypedContractMethod<
    [_swapRouterReBalance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTWAPConfig"
  ): TypedContractMethod<
    [_maxTWAPTickDifference: BigNumberish, _TWAPSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawer"
  ): TypedContractMethod<[_withdrawer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouterReBalance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRewardX64"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBalances"
  ): TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      to: AddressLike,
      withdrawBalances_: boolean,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AutoCompounded"
  ): TypedContractEvent<
    AutoCompoundedEvent.InputTuple,
    AutoCompoundedEvent.OutputTuple,
    AutoCompoundedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceAdded"
  ): TypedContractEvent<
    BalanceAddedEvent.InputTuple,
    BalanceAddedEvent.OutputTuple,
    BalanceAddedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceRemoved"
  ): TypedContractEvent<
    BalanceRemovedEvent.InputTuple,
    BalanceRemovedEvent.OutputTuple,
    BalanceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceWithdrawn"
  ): TypedContractEvent<
    BalanceWithdrawnEvent.InputTuple,
    BalanceWithdrawnEvent.OutputTuple,
    BalanceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OperatorChanged"
  ): TypedContractEvent<
    OperatorChangedEvent.InputTuple,
    OperatorChangedEvent.OutputTuple,
    OperatorChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RangeChanged"
  ): TypedContractEvent<
    RangeChangedEvent.InputTuple,
    RangeChangedEvent.OutputTuple,
    RangeChangedEvent.OutputObject
  >;
  getEvent(
    key: "RangePositionConfigured"
  ): TypedContractEvent<
    RangePositionConfiguredEvent.InputTuple,
    RangePositionConfiguredEvent.OutputTuple,
    RangePositionConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "RewardUpdated"
  ): TypedContractEvent<
    RewardUpdatedEvent.InputTuple,
    RewardUpdatedEvent.OutputTuple,
    RewardUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SwapRouterChanged"
  ): TypedContractEvent<
    SwapRouterChangedEvent.InputTuple,
    SwapRouterChangedEvent.OutputTuple,
    SwapRouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPConfigChanged"
  ): TypedContractEvent<
    TWAPConfigChangedEvent.InputTuple,
    TWAPConfigChangedEvent.OutputTuple,
    TWAPConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPConfigUpdated"
  ): TypedContractEvent<
    TWAPConfigUpdatedEvent.InputTuple,
    TWAPConfigUpdatedEvent.OutputTuple,
    TWAPConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeposited"
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWithdrawn"
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawerChanged"
  ): TypedContractEvent<
    WithdrawerChangedEvent.InputTuple,
    WithdrawerChangedEvent.OutputTuple,
    WithdrawerChangedEvent.OutputObject
  >;

  filters: {
    "AutoCompounded(address,uint256,uint256,uint256,uint256,uint256,address,address)": TypedContractEvent<
      AutoCompoundedEvent.InputTuple,
      AutoCompoundedEvent.OutputTuple,
      AutoCompoundedEvent.OutputObject
    >;
    AutoCompounded: TypedContractEvent<
      AutoCompoundedEvent.InputTuple,
      AutoCompoundedEvent.OutputTuple,
      AutoCompoundedEvent.OutputObject
    >;

    "BalanceAdded(address,address,uint256)": TypedContractEvent<
      BalanceAddedEvent.InputTuple,
      BalanceAddedEvent.OutputTuple,
      BalanceAddedEvent.OutputObject
    >;
    BalanceAdded: TypedContractEvent<
      BalanceAddedEvent.InputTuple,
      BalanceAddedEvent.OutputTuple,
      BalanceAddedEvent.OutputObject
    >;

    "BalanceRemoved(address,address,uint256)": TypedContractEvent<
      BalanceRemovedEvent.InputTuple,
      BalanceRemovedEvent.OutputTuple,
      BalanceRemovedEvent.OutputObject
    >;
    BalanceRemoved: TypedContractEvent<
      BalanceRemovedEvent.InputTuple,
      BalanceRemovedEvent.OutputTuple,
      BalanceRemovedEvent.OutputObject
    >;

    "BalanceWithdrawn(address,address,address,uint256)": TypedContractEvent<
      BalanceWithdrawnEvent.InputTuple,
      BalanceWithdrawnEvent.OutputTuple,
      BalanceWithdrawnEvent.OutputObject
    >;
    BalanceWithdrawn: TypedContractEvent<
      BalanceWithdrawnEvent.InputTuple,
      BalanceWithdrawnEvent.OutputTuple,
      BalanceWithdrawnEvent.OutputObject
    >;

    "OperatorChanged(address,bool)": TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;
    OperatorChanged: TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RangeChanged(uint256,uint256)": TypedContractEvent<
      RangeChangedEvent.InputTuple,
      RangeChangedEvent.OutputTuple,
      RangeChangedEvent.OutputObject
    >;
    RangeChanged: TypedContractEvent<
      RangeChangedEvent.InputTuple,
      RangeChangedEvent.OutputTuple,
      RangeChangedEvent.OutputObject
    >;

    "RangePositionConfigured(uint256,int32,int32,int32,int32,uint64,uint64,bool,uint64)": TypedContractEvent<
      RangePositionConfiguredEvent.InputTuple,
      RangePositionConfiguredEvent.OutputTuple,
      RangePositionConfiguredEvent.OutputObject
    >;
    RangePositionConfigured: TypedContractEvent<
      RangePositionConfiguredEvent.InputTuple,
      RangePositionConfiguredEvent.OutputTuple,
      RangePositionConfiguredEvent.OutputObject
    >;

    "RewardUpdated(address,uint64,uint64)": TypedContractEvent<
      RewardUpdatedEvent.InputTuple,
      RewardUpdatedEvent.OutputTuple,
      RewardUpdatedEvent.OutputObject
    >;
    RewardUpdated: TypedContractEvent<
      RewardUpdatedEvent.InputTuple,
      RewardUpdatedEvent.OutputTuple,
      RewardUpdatedEvent.OutputObject
    >;

    "SwapRouterChanged(address)": TypedContractEvent<
      SwapRouterChangedEvent.InputTuple,
      SwapRouterChangedEvent.OutputTuple,
      SwapRouterChangedEvent.OutputObject
    >;
    SwapRouterChanged: TypedContractEvent<
      SwapRouterChangedEvent.InputTuple,
      SwapRouterChangedEvent.OutputTuple,
      SwapRouterChangedEvent.OutputObject
    >;

    "TWAPConfigChanged(uint32,uint16)": TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;
    TWAPConfigChanged: TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;

    "TWAPConfigUpdated(address,uint16,uint32)": TypedContractEvent<
      TWAPConfigUpdatedEvent.InputTuple,
      TWAPConfigUpdatedEvent.OutputTuple,
      TWAPConfigUpdatedEvent.OutputObject
    >;
    TWAPConfigUpdated: TypedContractEvent<
      TWAPConfigUpdatedEvent.InputTuple,
      TWAPConfigUpdatedEvent.OutputTuple,
      TWAPConfigUpdatedEvent.OutputObject
    >;

    "TokenDeposited(address,uint256)": TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;

    "TokenWithdrawn(address,address,uint256)": TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;

    "WithdrawerChanged(address)": TypedContractEvent<
      WithdrawerChangedEvent.InputTuple,
      WithdrawerChangedEvent.OutputTuple,
      WithdrawerChangedEvent.OutputObject
    >;
    WithdrawerChanged: TypedContractEvent<
      WithdrawerChangedEvent.InputTuple,
      WithdrawerChangedEvent.OutputTuple,
      WithdrawerChangedEvent.OutputObject
    >;
  };
}
