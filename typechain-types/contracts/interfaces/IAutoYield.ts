/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAutoYield {
  export type AutoCompoundParamsStruct = {
    tokenId: BigNumberish;
    rewardConversion: BigNumberish;
    withdrawReward: boolean;
    doSwap: boolean;
  };

  export type AutoCompoundParamsStructOutput = [
    tokenId: bigint,
    rewardConversion: bigint,
    withdrawReward: boolean,
    doSwap: boolean
  ] & {
    tokenId: bigint;
    rewardConversion: bigint;
    withdrawReward: boolean;
    doSwap: boolean;
  };

  export type DecreaseLiquidityAndCollectParamsStruct = {
    tokenId: BigNumberish;
    liquidity: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
    recipient: AddressLike;
  };

  export type DecreaseLiquidityAndCollectParamsStructOutput = [
    tokenId: bigint,
    liquidity: bigint,
    amount0Min: bigint,
    amount1Min: bigint,
    deadline: bigint,
    recipient: string
  ] & {
    tokenId: bigint;
    liquidity: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
    deadline: bigint;
    recipient: string;
  };
}

export declare namespace INonfungiblePositionManager {
  export type CollectParamsStruct = {
    tokenId: BigNumberish;
    recipient: AddressLike;
    amount0Max: BigNumberish;
    amount1Max: BigNumberish;
  };

  export type CollectParamsStructOutput = [
    tokenId: bigint,
    recipient: string,
    amount0Max: bigint,
    amount1Max: bigint
  ] & {
    tokenId: bigint;
    recipient: string;
    amount0Max: bigint;
    amount1Max: bigint;
  };
}

export interface IAutoYieldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountBalances"
      | "accountTokens"
      | "autoCompound"
      | "balanceOf"
      | "collect"
      | "decreaseLiquidityAndCollect"
      | "factory"
      | "npm"
      | "onERC721Received"
      | "ownerOf"
      | "swapRouter"
      | "weth"
      | "withdrawBalance"
      | "withdrawBalances"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoCompounded"
      | "BalanceAdded"
      | "BalanceRemoved"
      | "BalanceWithdrawn"
      | "RangeChanged"
      | "RangePositionConfigured"
      | "TWAPConfigChanged"
      | "TokenDeposited"
      | "TokenWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountBalances",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "autoCompound",
    values: [IAutoYield.AutoCompoundParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [INonfungiblePositionManager.CollectParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityAndCollect",
    values: [IAutoYield.DecreaseLiquidityAndCollectParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "npm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalances",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [BigNumberish, AddressLike, boolean, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityAndCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "npm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace AutoCompoundedEvent {
  export type InputTuple = [
    account: AddressLike,
    tokenId: BigNumberish,
    amountAdded0: BigNumberish,
    amountAdded1: BigNumberish,
    reward0: BigNumberish,
    reward1: BigNumberish,
    token0: AddressLike,
    token1: AddressLike
  ];
  export type OutputTuple = [
    account: string,
    tokenId: bigint,
    amountAdded0: bigint,
    amountAdded1: bigint,
    reward0: bigint,
    reward1: bigint,
    token0: string,
    token1: string
  ];
  export interface OutputObject {
    account: string;
    tokenId: bigint;
    amountAdded0: bigint;
    amountAdded1: bigint;
    reward0: bigint;
    reward1: bigint;
    token0: string;
    token1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceAddedEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceRemovedEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, token: string, amount: bigint];
  export interface OutputObject {
    account: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BalanceWithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    account: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RangeChangedEvent {
  export type InputTuple = [oldTokenId: BigNumberish, newTokenId: BigNumberish];
  export type OutputTuple = [oldTokenId: bigint, newTokenId: bigint];
  export interface OutputObject {
    oldTokenId: bigint;
    newTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RangePositionConfiguredEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    lowerTickLimit: BigNumberish,
    upperTickLimit: BigNumberish,
    lowerTickDelta: BigNumberish,
    upperTickDelta: BigNumberish,
    token0SlippageX64: BigNumberish,
    token1SlippageX64: BigNumberish,
    onlyFees: boolean,
    maxRewardX64: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    lowerTickLimit: bigint,
    upperTickLimit: bigint,
    lowerTickDelta: bigint,
    upperTickDelta: bigint,
    token0SlippageX64: bigint,
    token1SlippageX64: bigint,
    onlyFees: boolean,
    maxRewardX64: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    lowerTickLimit: bigint;
    upperTickLimit: bigint;
    lowerTickDelta: bigint;
    upperTickDelta: bigint;
    token0SlippageX64: bigint;
    token1SlippageX64: bigint;
    onlyFees: boolean;
    maxRewardX64: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPConfigChangedEvent {
  export type InputTuple = [
    TWAPSeconds: BigNumberish,
    maxTWAPTickDifference: BigNumberish
  ];
  export type OutputTuple = [
    TWAPSeconds: bigint,
    maxTWAPTickDifference: bigint
  ];
  export interface OutputObject {
    TWAPSeconds: bigint;
    maxTWAPTickDifference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDepositedEvent {
  export type InputTuple = [account: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [account: string, tokenId: bigint];
  export interface OutputObject {
    account: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [account: string, to: string, tokenId: bigint];
  export interface OutputObject {
    account: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAutoYield extends BaseContract {
  connect(runner?: ContractRunner | null): IAutoYield;
  waitForDeployment(): Promise<this>;

  interface: IAutoYieldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountBalances: TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  accountTokens: TypedContractMethod<
    [account: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  autoCompound: TypedContractMethod<
    [params: IAutoYield.AutoCompoundParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        reward0: bigint;
        reward1: bigint;
        compounded0: bigint;
        compounded1: bigint;
      }
    ],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  collect: TypedContractMethod<
    [params: INonfungiblePositionManager.CollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  decreaseLiquidityAndCollect: TypedContractMethod<
    [params: IAutoYield.DecreaseLiquidityAndCollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  npm: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  swapRouter: TypedContractMethod<[], [string], "view">;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawBalance: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawBalances: TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [
      tokenId: BigNumberish,
      to: AddressLike,
      withdrawBalances_: boolean,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountBalances"
  ): TypedContractMethod<
    [account: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "accountTokens"
  ): TypedContractMethod<
    [account: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "autoCompound"
  ): TypedContractMethod<
    [params: IAutoYield.AutoCompoundParamsStruct],
    [
      [bigint, bigint, bigint, bigint] & {
        reward0: bigint;
        reward1: bigint;
        compounded0: bigint;
        compounded1: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "collect"
  ): TypedContractMethod<
    [params: INonfungiblePositionManager.CollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseLiquidityAndCollect"
  ): TypedContractMethod<
    [params: IAutoYield.DecreaseLiquidityAndCollectParamsStruct],
    [[bigint, bigint] & { amount0: bigint; amount1: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "npm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawBalance"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawBalances"
  ): TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      to: AddressLike,
      withdrawBalances_: boolean,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AutoCompounded"
  ): TypedContractEvent<
    AutoCompoundedEvent.InputTuple,
    AutoCompoundedEvent.OutputTuple,
    AutoCompoundedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceAdded"
  ): TypedContractEvent<
    BalanceAddedEvent.InputTuple,
    BalanceAddedEvent.OutputTuple,
    BalanceAddedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceRemoved"
  ): TypedContractEvent<
    BalanceRemovedEvent.InputTuple,
    BalanceRemovedEvent.OutputTuple,
    BalanceRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BalanceWithdrawn"
  ): TypedContractEvent<
    BalanceWithdrawnEvent.InputTuple,
    BalanceWithdrawnEvent.OutputTuple,
    BalanceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RangeChanged"
  ): TypedContractEvent<
    RangeChangedEvent.InputTuple,
    RangeChangedEvent.OutputTuple,
    RangeChangedEvent.OutputObject
  >;
  getEvent(
    key: "RangePositionConfigured"
  ): TypedContractEvent<
    RangePositionConfiguredEvent.InputTuple,
    RangePositionConfiguredEvent.OutputTuple,
    RangePositionConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "TWAPConfigChanged"
  ): TypedContractEvent<
    TWAPConfigChangedEvent.InputTuple,
    TWAPConfigChangedEvent.OutputTuple,
    TWAPConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDeposited"
  ): TypedContractEvent<
    TokenDepositedEvent.InputTuple,
    TokenDepositedEvent.OutputTuple,
    TokenDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenWithdrawn"
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;

  filters: {
    "AutoCompounded(address,uint256,uint256,uint256,uint256,uint256,address,address)": TypedContractEvent<
      AutoCompoundedEvent.InputTuple,
      AutoCompoundedEvent.OutputTuple,
      AutoCompoundedEvent.OutputObject
    >;
    AutoCompounded: TypedContractEvent<
      AutoCompoundedEvent.InputTuple,
      AutoCompoundedEvent.OutputTuple,
      AutoCompoundedEvent.OutputObject
    >;

    "BalanceAdded(address,address,uint256)": TypedContractEvent<
      BalanceAddedEvent.InputTuple,
      BalanceAddedEvent.OutputTuple,
      BalanceAddedEvent.OutputObject
    >;
    BalanceAdded: TypedContractEvent<
      BalanceAddedEvent.InputTuple,
      BalanceAddedEvent.OutputTuple,
      BalanceAddedEvent.OutputObject
    >;

    "BalanceRemoved(address,address,uint256)": TypedContractEvent<
      BalanceRemovedEvent.InputTuple,
      BalanceRemovedEvent.OutputTuple,
      BalanceRemovedEvent.OutputObject
    >;
    BalanceRemoved: TypedContractEvent<
      BalanceRemovedEvent.InputTuple,
      BalanceRemovedEvent.OutputTuple,
      BalanceRemovedEvent.OutputObject
    >;

    "BalanceWithdrawn(address,address,address,uint256)": TypedContractEvent<
      BalanceWithdrawnEvent.InputTuple,
      BalanceWithdrawnEvent.OutputTuple,
      BalanceWithdrawnEvent.OutputObject
    >;
    BalanceWithdrawn: TypedContractEvent<
      BalanceWithdrawnEvent.InputTuple,
      BalanceWithdrawnEvent.OutputTuple,
      BalanceWithdrawnEvent.OutputObject
    >;

    "RangeChanged(uint256,uint256)": TypedContractEvent<
      RangeChangedEvent.InputTuple,
      RangeChangedEvent.OutputTuple,
      RangeChangedEvent.OutputObject
    >;
    RangeChanged: TypedContractEvent<
      RangeChangedEvent.InputTuple,
      RangeChangedEvent.OutputTuple,
      RangeChangedEvent.OutputObject
    >;

    "RangePositionConfigured(uint256,int32,int32,int32,int32,uint64,uint64,bool,uint64)": TypedContractEvent<
      RangePositionConfiguredEvent.InputTuple,
      RangePositionConfiguredEvent.OutputTuple,
      RangePositionConfiguredEvent.OutputObject
    >;
    RangePositionConfigured: TypedContractEvent<
      RangePositionConfiguredEvent.InputTuple,
      RangePositionConfiguredEvent.OutputTuple,
      RangePositionConfiguredEvent.OutputObject
    >;

    "TWAPConfigChanged(uint32,uint16)": TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;
    TWAPConfigChanged: TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;

    "TokenDeposited(address,uint256)": TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;
    TokenDeposited: TypedContractEvent<
      TokenDepositedEvent.InputTuple,
      TokenDepositedEvent.OutputTuple,
      TokenDepositedEvent.OutputObject
    >;

    "TokenWithdrawn(address,address,uint256)": TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
  };
}
