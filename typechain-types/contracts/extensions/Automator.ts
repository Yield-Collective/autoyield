/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AutomatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TWAP_TICK_DIFFERENCE"
      | "MIN_TWAP_SECONDS"
      | "TWAPSeconds"
      | "factory"
      | "maxTWAPTickDifference"
      | "nonfungiblePositionManager"
      | "operators"
      | "owner"
      | "renounceOwnership"
      | "setOperator"
      | "setSwapRouter"
      | "setTWAPConfig"
      | "setWithdrawer"
      | "swapRouterIndex"
      | "swapRouterOption0"
      | "swapRouterOption1"
      | "swapRouterOption2"
      | "transferOwnership"
      | "weth"
      | "withdrawBalances"
      | "withdrawETH"
      | "withdrawer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OperatorChanged"
      | "OwnershipTransferred"
      | "SwapRouterChanged"
      | "TWAPConfigChanged"
      | "WithdrawerChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TWAP_TICK_DIFFERENCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TWAP_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TWAPSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTWAPTickDifference",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTWAPConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterOption0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterOption1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouterOption2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBalances",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawer",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TWAP_TICK_DIFFERENCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TWAP_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TWAPSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTWAPTickDifference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTWAPConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterOption0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterOption1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapRouterOption2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawer", data: BytesLike): Result;
}

export namespace OperatorChangedEvent {
  export type InputTuple = [newOperator: AddressLike, active: boolean];
  export type OutputTuple = [newOperator: string, active: boolean];
  export interface OutputObject {
    newOperator: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRouterChangedEvent {
  export type InputTuple = [swapRouterIndex: BigNumberish];
  export type OutputTuple = [swapRouterIndex: bigint];
  export interface OutputObject {
    swapRouterIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPConfigChangedEvent {
  export type InputTuple = [
    TWAPSeconds: BigNumberish,
    maxTWAPTickDifference: BigNumberish
  ];
  export type OutputTuple = [
    TWAPSeconds: bigint,
    maxTWAPTickDifference: bigint
  ];
  export interface OutputObject {
    TWAPSeconds: bigint;
    maxTWAPTickDifference: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawerChangedEvent {
  export type InputTuple = [newWithdrawer: AddressLike];
  export type OutputTuple = [newWithdrawer: string];
  export interface OutputObject {
    newWithdrawer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Automator extends BaseContract {
  connect(runner?: ContractRunner | null): Automator;
  waitForDeployment(): Promise<this>;

  interface: AutomatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TWAP_TICK_DIFFERENCE: TypedContractMethod<[], [bigint], "view">;

  MIN_TWAP_SECONDS: TypedContractMethod<[], [bigint], "view">;

  TWAPSeconds: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  maxTWAPTickDifference: TypedContractMethod<[], [bigint], "view">;

  nonfungiblePositionManager: TypedContractMethod<[], [string], "view">;

  operators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOperator: TypedContractMethod<
    [_operator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  setSwapRouter: TypedContractMethod<
    [_swapRouterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTWAPConfig: TypedContractMethod<
    [_maxTWAPTickDifference: BigNumberish, _TWAPSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWithdrawer: TypedContractMethod<
    [_withdrawer: AddressLike],
    [void],
    "nonpayable"
  >;

  swapRouterIndex: TypedContractMethod<[], [bigint], "view">;

  swapRouterOption0: TypedContractMethod<[], [string], "view">;

  swapRouterOption1: TypedContractMethod<[], [string], "view">;

  swapRouterOption2: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  weth: TypedContractMethod<[], [string], "view">;

  withdrawBalances: TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawETH: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  withdrawer: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TWAP_TICK_DIFFERENCE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_TWAP_SECONDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TWAPSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxTWAPTickDifference"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonfungiblePositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [_operator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapRouter"
  ): TypedContractMethod<
    [_swapRouterIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTWAPConfig"
  ): TypedContractMethod<
    [_maxTWAPTickDifference: BigNumberish, _TWAPSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawer"
  ): TypedContractMethod<[_withdrawer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapRouterIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapRouterOption0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouterOption1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "swapRouterOption2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "weth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawBalances"
  ): TypedContractMethod<
    [tokens: AddressLike[], to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawETH"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawer"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OperatorChanged"
  ): TypedContractEvent<
    OperatorChangedEvent.InputTuple,
    OperatorChangedEvent.OutputTuple,
    OperatorChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapRouterChanged"
  ): TypedContractEvent<
    SwapRouterChangedEvent.InputTuple,
    SwapRouterChangedEvent.OutputTuple,
    SwapRouterChangedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPConfigChanged"
  ): TypedContractEvent<
    TWAPConfigChangedEvent.InputTuple,
    TWAPConfigChangedEvent.OutputTuple,
    TWAPConfigChangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawerChanged"
  ): TypedContractEvent<
    WithdrawerChangedEvent.InputTuple,
    WithdrawerChangedEvent.OutputTuple,
    WithdrawerChangedEvent.OutputObject
  >;

  filters: {
    "OperatorChanged(address,bool)": TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;
    OperatorChanged: TypedContractEvent<
      OperatorChangedEvent.InputTuple,
      OperatorChangedEvent.OutputTuple,
      OperatorChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapRouterChanged(uint8)": TypedContractEvent<
      SwapRouterChangedEvent.InputTuple,
      SwapRouterChangedEvent.OutputTuple,
      SwapRouterChangedEvent.OutputObject
    >;
    SwapRouterChanged: TypedContractEvent<
      SwapRouterChangedEvent.InputTuple,
      SwapRouterChangedEvent.OutputTuple,
      SwapRouterChangedEvent.OutputObject
    >;

    "TWAPConfigChanged(uint32,uint16)": TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;
    TWAPConfigChanged: TypedContractEvent<
      TWAPConfigChangedEvent.InputTuple,
      TWAPConfigChangedEvent.OutputTuple,
      TWAPConfigChangedEvent.OutputObject
    >;

    "WithdrawerChanged(address)": TypedContractEvent<
      WithdrawerChangedEvent.InputTuple,
      WithdrawerChangedEvent.OutputTuple,
      WithdrawerChangedEvent.OutputObject
    >;
    WithdrawerChanged: TypedContractEvent<
      WithdrawerChangedEvent.InputTuple,
      WithdrawerChangedEvent.OutputTuple,
      WithdrawerChangedEvent.OutputObject
    >;
  };
}
