/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  AutoRange,
  AutoRangeInterface,
} from "../../../contracts/extensions/AutoRange";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOperator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "active",
        type: "bool",
      },
    ],
    name: "OperatorChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "oldTokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "newTokenId",
        type: "uint256",
      },
    ],
    name: "RangeChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int32",
        name: "lowerTickLimit",
        type: "int32",
      },
      {
        indexed: false,
        internalType: "int32",
        name: "upperTickLimit",
        type: "int32",
      },
      {
        indexed: false,
        internalType: "int32",
        name: "lowerTickDelta",
        type: "int32",
      },
      {
        indexed: false,
        internalType: "int32",
        name: "upperTickDelta",
        type: "int32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "token0SlippageX64",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "token1SlippageX64",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "onlyFees",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "maxRewardX64",
        type: "uint64",
      },
    ],
    name: "RangePositionConfigured",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "swapRouterIndex",
        type: "uint8",
      },
    ],
    name: "SwapRouterChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "TWAPSeconds",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "maxTWAPTickDifference",
        type: "uint16",
      },
    ],
    name: "TWAPConfigChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newWithdrawer",
        type: "address",
      },
    ],
    name: "WithdrawerChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "MAX_TWAP_TICK_DIFFERENCE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_TWAP_SECONDS",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TWAPSeconds",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "int32",
            name: "lowerTickLimit",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "upperTickLimit",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "lowerTickDelta",
            type: "int32",
          },
          {
            internalType: "int32",
            name: "upperTickDelta",
            type: "int32",
          },
          {
            internalType: "uint64",
            name: "token0SlippageX64",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "token1SlippageX64",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "onlyFees",
            type: "bool",
          },
          {
            internalType: "uint64",
            name: "maxRewardX64",
            type: "uint64",
          },
        ],
        internalType: "struct AutoRange.RangePositionConfig",
        name: "config",
        type: "tuple",
      },
    ],
    name: "configToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "swap0To1",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "swapData",
            type: "bytes",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "amountRemoveMin0",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountRemoveMin1",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "rewardX64",
            type: "uint64",
          },
        ],
        internalType: "struct AutoRange.RangeExecuteParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IUniswapV3Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxTWAPTickDifference",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nonfungiblePositionManager",
    outputs: [
      {
        internalType: "contract INonfungiblePositionManager",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "operators",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rangePositionConfigs",
    outputs: [
      {
        internalType: "int32",
        name: "lowerTickLimit",
        type: "int32",
      },
      {
        internalType: "int32",
        name: "upperTickLimit",
        type: "int32",
      },
      {
        internalType: "int32",
        name: "lowerTickDelta",
        type: "int32",
      },
      {
        internalType: "int32",
        name: "upperTickDelta",
        type: "int32",
      },
      {
        internalType: "uint64",
        name: "token0SlippageX64",
        type: "uint64",
      },
      {
        internalType: "uint64",
        name: "token1SlippageX64",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "onlyFees",
        type: "bool",
      },
      {
        internalType: "uint64",
        name: "maxRewardX64",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_active",
        type: "bool",
      },
    ],
    name: "setOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_swapRouterIndex",
        type: "uint8",
      },
    ],
    name: "setSwapRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_maxTWAPTickDifference",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "_TWAPSeconds",
        type: "uint32",
      },
    ],
    name: "setTWAPConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_withdrawer",
        type: "address",
      },
    ],
    name: "setWithdrawer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouterIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouterOption0",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouterOption1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouterOption2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "contract IWETH9",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdrawBalances",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

export class AutoRange__factory {
  static readonly abi = _abi;
  static createInterface(): AutoRangeInterface {
    return new Interface(_abi) as AutoRangeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AutoRange {
    return new Contract(address, _abi, runner) as unknown as AutoRange;
  }
}
